{"ast":null,"code":"import _toConsumableArray from \"E:/Project/NextJS/dscwebsite/dsc-website/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/* eslint-disable no-restricted-syntax */\nimport Router from 'next/router';\nimport { useCallback, useEffect, useRef } from 'react';\n\nvar useTransitionFix = function useTransitionFix() {\n  var cleanupRef = useRef(function () {});\n  useEffect(function () {\n    var changeListener = function changeListener() {\n      // Create a clone of every <style> and <link> that currently affects the page. It doesn't\n      // matter if Next.js is going to remove them or not since we are going to remove the copies\n      // ourselves later on when the transition finishes.\n      var nodes = document.querySelectorAll('link[rel=stylesheet], style:not([media=x])');\n\n      var copies = _toConsumableArray(nodes).map(function (el) {\n        return el.cloneNode(true);\n      });\n\n      var _iterator = _createForOfIteratorHelper(copies),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var copy = _step.value;\n          // Remove Next.js' data attributes so the copies are not removed from the DOM in the route\n          // change process.\n          copy.removeAttribute('data-n-p');\n          copy.removeAttribute('data-n-href'); // Add duplicated nodes to the DOM.\n\n          document.head.appendChild(copy);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      cleanupRef.current = function () {\n        var _iterator2 = _createForOfIteratorHelper(copies),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var copy = _step2.value;\n            // Remove previous page's styles after the transition has finalized.\n            document.head.removeChild(copy);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      };\n    };\n\n    Router.events.on('beforeHistoryChange', changeListener);\n    return function () {\n      Router.events.off('beforeHistoryChange', changeListener);\n      cleanupRef.current();\n    };\n  }, []); // Return an fixed reference function that calls the internal cleanup reference.\n\n  return useCallback(function () {\n    cleanupRef.current();\n  }, []);\n};\n\nexport default useTransitionFix;","map":null,"metadata":{},"sourceType":"module"}