{"ast":null,"code":"/* eslint-disable no-restricted-syntax */\nimport Router from 'next/router';\nimport { useCallback, useEffect, useRef } from 'react';\n\nconst useTransitionFix = () => {\n  const cleanupRef = useRef(() => {});\n  useEffect(() => {\n    const changeListener = () => {\n      // Create a clone of every <style> and <link> that currently affects the page. It doesn't\n      // matter if Next.js is going to remove them or not since we are going to remove the copies\n      // ourselves later on when the transition finishes.\n      const nodes = document.querySelectorAll('link[rel=stylesheet], style:not([media=x])');\n      const copies = [...nodes].map(el => el.cloneNode(true));\n\n      for (const copy of copies) {\n        // Remove Next.js' data attributes so the copies are not removed from the DOM in the route\n        // change process.\n        copy.removeAttribute('data-n-p');\n        copy.removeAttribute('data-n-href'); // Add duplicated nodes to the DOM.\n\n        document.head.appendChild(copy);\n      }\n\n      cleanupRef.current = () => {\n        for (const copy of copies) {\n          // Remove previous page's styles after the transition has finalized.\n          document.head.removeChild(copy);\n        }\n      };\n    };\n\n    Router.events.on('beforeHistoryChange', changeListener);\n    return () => {\n      Router.events.off('beforeHistoryChange', changeListener);\n      cleanupRef.current();\n    };\n  }, []); // Return an fixed reference function that calls the internal cleanup reference.\n\n  return useCallback(() => {\n    cleanupRef.current();\n  }, []);\n};\n\nexport default useTransitionFix;","map":null,"metadata":{},"sourceType":"module"}